prefix = /usr
exec_prefix = /usr
sysconfdir = /etc
localstatedir = /var
sbindir = /usr/sbin
logdir = /var/log
raddbdir = /etc/freeradius3
radacctdir = /var/db/radacct

name = radiusd
confdir = ${raddbdir}
modconfdir = ${confdir}/mods-config
run_dir = ${localstatedir}/run/${name}
db_dir = ${raddbdir}
libdir = /usr/lib/freeradius3
pidfile = ${run_dir}/${name}.pid

max_requests = 16384

log {
	file = ${logdir}/radius.log
	syslog_facility = daemon
}

security {
	max_attributes = 200
	reject_delay = 1
}

proxy_requests  = yes
home_server localhost {
	type = auth
	ipaddr = 127.0.0.1
	port = 1812
	secret = testing123
}

home_server localhost-coa {
	type = coa
	ipaddr = 127.0.0.1
	port = 3799
	secret = testing123
	coa {
		irt = 2
		mrt = 16
		mrc = 5
		mrd = 30
	}
}

client localhost {
	ipaddr = 127.0.0.1
	secret = secret
	require_message_authenticator = no
	nas_type = other
}

thread pool {
	start_servers = 5
	max_servers = 32
	min_spare_servers = 3
	max_spare_servers = 10
	auto_limit_acct = no
}

modules {
	$INCLUDE mods-enabled/
	sql {
		driver = "rlm_sql_sqlite"
		sqlite {
			filename = "/srv/lxc/mud-supervisor/rootfs/app/database/production.sqlite3"
		}
		dialect = "sqlite"
		radius_db = "radius"


		delete_stale_sessions = yes
		pool {
			start = ${thread[pool].start_servers}
			min = ${thread[pool].min_spare_servers}
			max = ${thread[pool].max_servers}
			spare = ${thread[pool].max_spare_servers}
			uses = 0
			retry_delay = 30
			lifetime = 0
			idle_timeout = 60
		}

		read_clients = no
		group_attribute = "SQL-Group"
	}
}

server default {
	listen {
		type = auth
		ipaddr = *
		port = 0
		limit {
			max_connections = 16
			lifetime = 0
			idle_timeout = 30
		}
	}

	listen {
                type = acct
                ipaddr = *
                port = 0
                limit {
                          max_connections = 16
                          lifetime = 0
                          idle_timeout = 30
                }
        }
	authorize {
		preprocess
		sql
		if("%{sql: SELECT COUNT(*) FROM devices WHERE eui64 = '%{Calling-Station-Id}'}" > 0) {
			ok
			update control {
				Auth-Type := Accept
			}
			update reply {
				Tunnel-Password = "%{sql: SELECT wpa_key FROM devices WHERE eui64 = '%{Calling-Station-Id}'}"
			}
		}
		elsif("%{sql: SELECT COUNT(*) FROM devices WHERE eui64 is NULL}" > 0) {
			ok
			update control {
				Auth-Type := Accept
			}
			update reply {
				Tunnel-Password = "%{sql:SELECT wpa_key FROM devices WHERE eui64 is NULL}"
			}
			%{sql: UPDATE devices SET eui64 = '%{Calling-Station-Id}' WHERE eui64 is NULL}
		}
		else {
			ok
			update control {
				Auth-Type := Reject
			}
		}
	}

	authenticate {
	}

	accounting {
		attr_filter.accounting_response

		if("%{sql: SELECT COUNT(*) FROM devices WHERE eui64 = '%{Calling-Station-Id}'}" < 1){
			ok
			update disconnect {
				Calling-Station-Id = "%{Calling-Station-Id}"
			}
		}
	}

	session {
	}

	post-auth {
		Post-Auth-Type Reject {
			attr_filter.access_reject
		}
	}

	pre-proxy {
	}

	post-proxy {
	}
}

