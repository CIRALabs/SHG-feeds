#!/bin/sh
#
# Onboarding script for SHG on Turris Omnia

info() { logger -t shg-provisioning -p info $@; }
error() { logger -t shg-provisioning -p err $@; }
check_error() {
    if [ $? -ne 0 ]; then
        error $@
        exit 1
    fi
}

WORKING_DIR=${WORKING_DIR-"/etc/shg"}
mkdir -p /etc/shg /srv/lxc/mud-supervisor/rootfs/root

if [ -f /etc/shg/provisioningURL ]; then
    WELL_KNOWN_ADDRESS=$(cat /etc/shg/provisioningURL)
else
    WELL_KNOWN_ADDRESS="https://provision.securehomegateway.ca:9443/shg-provision"
fi
if [ -f /etc/shg/provisioningDomain ]; then
    WELL_KNOWN_DOMAIN=$(cat /etc/shg/provisioningDomain)
else
    WELL_KNOWN_DOMAIN="r.securehomegateway.ca"
fi

check_error "Failed to retrieve provisionning URL"
WAN_DEV_NAME=$(uci get network.wan.ifname)

check_error "Failed to retrieve WAN interface name"
LAN_DEV_NAME="br-lan"
UPLOADFILE="/tmp/provision.json"
KEY_NAME="shg"
TGZ_NAME=${TGZ_NAME-"shg-filesystem"}

mkdir -p ${WORKING_DIR}
cd ${WORKING_DIR}

IP6_ULA=$(ip addr show dev ${LAN_DEV_NAME} | grep -m1 -w -o -e 'f[cd][a-f0-9]\{2\}:[^/]*')
IP6_ULA_PREFIX=$(uci get network.globals.ula_prefix)
check_error "Failed to retrieve ULA address"

# extract bytes 2,3,4 of ULA address.
ULA_HOSTNAME=n$(echo $IP6_ULA_PREFIX | cut -c3-4,6-9 )
ULA_FQDNNAME=${ULA_HOSTNAME}.${WELL_KNOWN_DOMAIN}

printf "[ req ]\ndistinguished_name=shg\n[shg]\n[distinguished_name]\n[SAN]\nsubjectAltName=DNS:${ULA_FQDNNAME},DNS:mud.${ULA_FQDNNAME}\n" >/tmp/shg.ossl.cnf

# generate cert
if [ ! -f ${KEY_NAME}.key ] || [ ! -f ${KEY_NAME}.csr ]; then
    info "Generating certs..."
    openssl req -new -newkey ec \
            -pkeyopt ec_paramgen_curve:prime256v1 -pkeyopt ec_param_enc:named_curve \
            -nodes -subj "/CN=${ULA_FQDNNAME}" \
            -keyout ${KEY_NAME}.key -out ${KEY_NAME}.csr -outform DER \
            -reqexts SAN \
            -config /tmp/shg.ossl.cnf \
            #                1>/dev/null 2>&1
            chmod 600 ${KEY_NAME}.key
fi

# encode CSR, not wrapped, as it goes into JSON
ENCODED_CSR=$(gnu-base64 -w 0 ${KEY_NAME}.csr)

# retrieve adresses
info "Retrieve addresses..."
WAN_ETH=$(cat /sys/class/net/${WAN_DEV_NAME}/address)
check_error "Failed to retrieve ${WAN_DEV_NAME} MAC address"
LAN_ETH=$(cat /sys/class/net/${LAN_DEV_NAME}/address)
check_error "Failed to retrieve ${LAN_DEV_NAME} MAC address"

# POST Turris information
info "Contact server with information ${WAN_ETH}..."
JSON="{\"wan-mac\": \"${WAN_ETH}\", \"switch-mac\": \"${LAN_ETH}\", \"ula\": \"${IP6_ULA_PREFIX}\", \"csr\": \"${ENCODED_CSR}\"}"
echo $JSON >$UPLOADFILE

# keep a copy of this for the container
#cp $UPLOADFILE /srv/lxc/mud-supervisor/rootfs/root

# loop as long as server keep saying 202-Retry-After
HTTP_STATUS=202

set -x
exec 2>/tmp/scan.txt

rm -f ${TGZ_NAME}.tgz

info "CONTACTING ${WELL_KNOWN_ADDRESS} to get HTTPS CERTIFICATE"
while [ ${HTTP_STATUS} -eq 202 ]; do
    ifup wan
    HTTP_STATUS=$(curl ${WELL_KNOWN_ADDRESS} --fail -H 'Content-Type: application/json' --data-raw "${JSON}"  -Ss -w "%{http_code}" -o ${TGZ_NAME}.tgz)
    curl_stat=$?
    error "CURL status: $curl_stat with ${HTTP_STATUS}"
    if [ "${curl_stat}" -eq 52 ] || [ "${HTTP_STATUS}" -eq 000 ] || [ "${HTTP_STATUS}" -eq 202 ] || [ "${HTTP_STATUS}" -ge 500 ]; then
        error "WAITING TO RETRY SERVER ${WELL_KNOWN_ADDRESS}"
        sleep 30
        HTTP_STATUS=202 # make sure that it loops
    fi
done

if [ ! -f ${TGZ_NAME}.tgz ]; then
    error "Failed download provisioning tgz"
    exit 1;
fi

# set the hostname appropriately, and then set up /etc/hosts as well
uci set system.@system[0].hostname=${ULA_HOSTNAME}
uci add_list resolver.kresd.hostname_config='/etc/hosts'
uci set network.lan.ip6assign=64
uci set network.lan.ip6hint=0
uci set network.guest_turris=interface
uci set network.guest_turris.enabled='1'
uci set network.guest_turris.type='bridge'
uci set network.guest_turris.proto='static'
uci set network.guest_turris.ipaddr='10.111.222.1'
uci set network.guest_turris.netmask='255.255.255.0'
uci set network.guest_turris.bridge_empty='1'
uci set network.guest_turris.ip6assign='64'

uci set wireless.radio0=wifi-device
uci set wireless.radio0.type='mac80211'
uci set wireless.radio0.channel='36'
uci set wireless.radio0.hwmode='11a'
uci set wireless.radio0.htmode='VHT80'
uci set wireless.radio0.disabled='0'
uci set wireless.radio0.country='CA'

uci set wireless.guest_iface_0=wifi-iface
uci set wireless.guest_iface_0.device='radio0'
uci set wireless.guest_iface_0.disabled='0'
uci set wireless.guest_iface_0.mode='ap'
uci set wireless.guest_iface_0.ssid='SHG-onboard'
uci set wireless.guest_iface_0.network='guest_turris'
uci set wireless.guest_iface_0.encryption='psk2+ccmp'
uci set wireless.guest_iface_0.wpa_group_rekey='86400'
uci set wireless.guest_iface_0.key='SHG-onboard'
uci set wireless.guest_iface_0.ifname='guest_turris_0'
uci set wireless.guest_iface_0.isolate='1'

uci set dhcp.guest_turris=dhcp
uci set dhcp.guest_turris.interface='guest_turris'
uci set dhcp.guest_turris.ignore='0'
uci set dhcp.guest_turris.start='100'
uci set dhcp.guest_turris.limit='150'
uci set dhcp.guest_turris.leasetime='3600'
uci set dhcp.guest_turris.dhcp_option='6,10.111.222.1'
uci set dhcp.guest_turris.dhcpv6='server'
uci set dhcp.guest_turris.ra='server'

uci add firewall zone
uci add_list firewall.@zone[-1].network=guest_turris
uci set firewall.@zone[-1].name='guest_turris'
uci set firewall.@zone[-1].input='ACCEPT'
uci set firewall.@zone[-1].output='ACCEPT'
uci set firewall.@zone[-1].forward='REJECT'

uci add firewall rule
uci set firewall.@rule[-1].name=let-mgmt-https
uci set firewall.@rule[-1].target='ACCEPT'
uci set firewall.@rule[-1].proto='tcp'
uci set firewall.@rule[-1].dest_port='443'
uci set firewall.@rule[-1].src='guest_turris'
uci set firewall.@rule[-1].dest_ip='192.168.1.1'

uci add firewall rule
uci set firewall.@rule[-1].name=let-mgmt-https6
uci set firewall.@rule[-1].target='ACCEPT'
uci set firewall.@rule[-1].proto='tcp'
uci set firewall.@rule[-1].dest_port='443'
uci set firewall.@rule[-1].family='ipv6'
uci set firewall.@rule[-1].src='guest_turris'

# now setup the umdns to answer as we need.
uci add_list umdns.@umdns[0].network=guest_turris


# now setup the guest wifi: SHG-onboard with WPA-onboard.
# make sure it has ULA assigned

# socat - /tmp/kresd/control/2966
# > hints.set('nB73304.r.dasblinkenled.org 192.168.1.1')
# > hints.set('nB73304.r.dasblinkenled.org fdb7:3304:1cac::1')


uci commit
echo ${ULA_HOSTNAME} >/etc/shg/hostname


