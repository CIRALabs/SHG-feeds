#!/bin/sh /etc/rc.common
#
# Onboarding script for SHG on Turris Omnia

START=80
STOP=00
USE_PROCD=1


#info() { echo $@; }
#error(){ >&2 echo $@; }
info() { logger -t shg-provisioning -p info $@; }
error() { logger -t shg-provisioning -p err $@; }
check_error() {
    if [ $? -ne 0 ]; then
        error $@
        exit 1
    fi
}

start_service() {
    WELL_KNOWN_FILE="/etc/shg/onboarded"
    WORKING_DIR="/etc/shg"
    if [ -f /etc/shg/provisioningURL ]; then
        WELL_KNOWN_ADDRESS=$(cat /etc/shg/provisioningURL)
    else
        WELL_KNOWN_ADDRESS="https://provision.securehomegateway.ca/shg-provision"
    fi
    check_error "Failed to retrieve provisionning URL"
    WAN_DEV_NAME=$(uci get network.wan.ifname)
    check_error "Failed to retrieve WAN interface name"
    LAN_DEV_NAME="br-lan"
    UPLOADFILE="/tmp/provision.json"
    KEY_NAME="shg"
    TGZ_NAME="shg-filesystem"
    POSTINST_SCRIPT="./postinst.sh"

    # Turris is already onboarded
    if [ -f $WELL_KNOWN_FILE ]; then
        info "Already onboarded"
        exit 0;
    fi

    mkdir -p ${WORKING_DIR}
    cd ${WORKING_DIR}

    #IP6_ULA=$(ip addr show dev ${LAN_DEV_NAME} | grep -m1 -w -o -e 'fd[a-f0-9]\{2\}:[^/]*')
    IP6_ULA_PREFIX=$(uci get network.globals.ula_prefix)
    check_error "Failed to retrieve ULA address"

    # extract bytes 2,3,4 of ULA address.
    ULA_HOSTNAME=n$(echo $IP6_ULA_PREFIX | cut -c3-4,6-9 ).r.dasblinkenled.org

    printf "[ req ]\ndistinguished_name=shg\n[shg]\n[distinguished_name]\n[SAN]\nsubjectAltName=DNS:${ULA_HOSTNAME},DNS:mud.${ULA_HOSTNAME}" >/tmp/shg.ossl.cnf

    # generate cert
    if [ ! -f ${KEY_NAME}.key ] || [ ! -f ${KEY_NAME}.csr ]; then
        info "Generating certs..."
        openssl req -new -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 \
                -nodes -subj "/CN=${ULA_HOSTNAME}" \
                -keyout ${KEY_NAME}.key -out ${KEY_NAME}.csr -outform DER \
                -reqexts SAN \
                -config /tmp/shg.ossl.cnf \
#                1>/dev/null 2>&1
        chmod 600 ${KEY_NAME}.key
    fi

    # encode CSR, not wrapped, as it goes into JSON
    ENCODED_CSR=$(base64 -w 0 ${KEY_NAME}.csr)

    # retrieve adresses
    info "Retrieve addresses..."
    WAN_ETH=$(cat /sys/class/net/${WAN_DEV_NAME}/address)
    check_error "Failed to retrieve ${WAN_DEV_NAME} MAC address"
    LAN_ETH=$(cat /sys/class/net/${LAN_DEV_NAME}/address)
    check_error "Failed to retrieve ${LAN_DEV_NAME} MAC address"

    # POST Turris information
    info "Contact server with information..."
    JSON="{\"wan-mac\": \"${WAN_ETH}\", \"switch-mac\": \"${LAN_ETH}\", \"ula\": \"${IP6_ULA_PREFIX}\", \"csr\": \"${ENCODED_CSR}\"}"
    echo $JSON >$UPLOADFILE
    HTTP_STATUS=$(curl ${WELL_KNOWN_ADDRESS} -H 'Content-Type: application/json' --data-raw "${JSON}"  -Ss -w "%{http_code}" -o ${TGZ_NAME}.tgz)
    check_error "Failed to download filesystem tgz"
    if [ ${HTTP_STATUS} -ne 200 ]; then
        error "Failed to contact server: HTTP ${HTTP_STATUS}"
        exit 1;
    fi

    # Extract tgz file
    info "Filesystem successfully retrieved, install it..."
    cd /
    tar -xzf ${WORKING_DIR}/${TGZ_NAME}.tgz 1>/dev/null
    check_error "Failed to extract filesystem tgz"

    # Run post-installation script
    cd ${WORKING_DIR}
    ${POSTINST_SCRIPT}
    check_error "Failed to run post-installation script"

    # Set the well-known file to avoid subsequent onboarding
    touch ${WELL_KNOWN_FILE}

    # Reboot
    info "Filesystem installed, reboot..."
    reboot
}

